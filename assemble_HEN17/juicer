# this is a snakemake pipeline for mapping hic data to scaffolds with juicer

# author: Yutang Chen,  MPB, ETH Zurich

# 04.07.2023


################################################################################
SAMPLE = 'redclover'
ENZYME  = 'none'

cwd = '/scratch/yutang/redclover/h2'

ASM = 'redclover_h2_scaffolds_final.fa'

hic = ['redclover_hic_R1.fastq', 'redclover_hic_R2.fastq']

juicer_sh = '/scratch/yutang/juicer/scripts/juicer.sh'
juicer_top = '/scratch/yutang/juicer'
map_threads = 48

generate_assembly = '/scratch/yutang/juicer/3d-dna/utils/generate-assembly-file-from-fasta.awk'
generate_hic = '/scratch/yutang/juicer/3d-dna/visualize/run-assembly-visualizer.sh'
################################################################################

rule all:
	input:
		'build_hic.success'

################################################################################
rule index_scaffold:
	input:
		'references/' + ASM 
	output:
		'references/' + ASM + '.bwt'
	shell:
		'''
		bwa index {input}
		'''

# faidx scaffolds
rule get_faidx:
	input:
		'references/' + ASM
	output:
		'references/' + ASM + '.fai'
	shell:
		'''
		samtools faidx {input}
		'''

# get size
rule get_size:
	input:
		'references/' + ASM + '.fai'
	output:
		'references/chrom.sizes'
	shell:
		'''
		cut -f1,2 {input} > {output}
		'''

rule map_hic_with_juicer:
	input:
		idx = 'references/' + ASM + '.bwt',
		ref = 'references/' + ASM,
		chr_size = 'references/chrom.sizes'
	output:
		'map_hic.success'
	params:
		juicer = juicer_sh,
		ID = SAMPLE,
		WD = cwd,
		enzyme = ENZYME,
		top = juicer_top
	threads:
		map_threads
	shell:
		'''
		{params.juicer} -e --assembly -t {threads} -T {threads} -g {params.ID} -d {params.WD} -p {input.chr_size} -s {params.enzyme} -z {input.ref} -D {params.top} && touch map_hic.success
		'''

# create assembly file for JBT
rule YaHS_create_assembly:
	input:
		'references/' + ASM
	output:
		SAMPLE + '.assembly'
	params:
		generate_assembly_script = generate_assembly
	shell:
		'''
		awk -f {params.generate_assembly_script} {input} > {output}
		'''

# produce .hic
rule build_hic:
	input:
		suc = 'map_hic.success',
		assembly = SAMPLE + '.assembly'
	output:
		'build_hic.success'
	params:
		generate_hic_script = generate_hic,
		align = 'aligned/merged_nodups.txt'
	shell:
		'''
		bash {params.generate_hic_script} -c {input.assembly} {params.align} && touch build_hic.success
		'''

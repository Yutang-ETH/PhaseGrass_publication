# this is a snakemake pipeline for validating the phase in the phased assembly based on chromosome alignment

# author: Yutang Chen,  MPB, ETH Zurich

# 17.10.2023

#################################################################################
rule all:
    input:
        'h1_chop/h1.all.snps',
        'h2_chop/h2.all.snps'



# extrac chrs from the input assembly
rule extract_h1_chr:
    input: 
        'asm/DH647.h1.fasta'
    output: 
        'h1/DH647.h1.{chr}.fasta'
    params: 
        chrs = '{chr}'
    shell:
        '''
        samtools faidx {input} {params.chrs} > {output}
        '''

rule extract_h2_chr:
    input: 
        'asm/DH647.h2.fasta'
    output: 
        'h2/DH647.h2.{chr}.fasta'
    params: 
        chrs = '{chr}'
    shell:
        '''
        samtools faidx {input} {params.chrs} > {output}
        '''

rule extract_ref_chr:
    input: 
        'asm/kyuss.fasta'
    output: 
        'kyuss/kyuss.{chr}.fasta'
    params: 
        chrs = '{chr}'
    shell:
        '''
        samtools faidx {input} {params.chrs} > {output}
        '''

# chop qur to 100 kb segments for alignment
rule chop_h1_chr:
    input:
        'h1/DH647.h1.{chr}.fasta'
    output:
        'h1_chop/DH647.h1.{chr}.chop.fasta'
    params:
        suf = '_h1_{chr}'
    shell:
        '''
        seqkit sliding -s 20000 -W 100000 -g -S {params.suf} {input} > {output}
        '''

rule chop_h2_chr:
    input:
        'h2/DH647.h2.{chr}.fasta'
    output:
        'h2_chop/DH647.h2.{chr}.chop.fasta'
    params:
        suf = '_h2_{chr}'
    shell:
        '''
        seqkit sliding -s 20000 -W 100000 -g -S {params.suf} {input} > {output}
        '''

# align phased assembly to reference
rule align_h1_chr:
    input:
        ref = 'kyuss/kyuss.{chr}.fasta',
        qry = 'h1_chop/DH647.h1.{chr}.chop.fasta'
    output:
        'h1_chop/{chr}.paf'
    threads: 15
    # conda: 'syri'
    shell:
        '''
        minimap2 -x asm5 -t {threads} -c {input.ref} {input.qry} > {output}
        '''

rule align_h2_chr:
    input:
        ref = 'kyuss/kyuss.{chr}.fasta',
        qry = 'h2_chop/DH647.h2.{chr}.chop.fasta'
    output:
        'h2_chop/{chr}.paf'
    threads: 15
    # conda: 'syri'
    shell:
        '''
        minimap2 -x asm5 -t {threads} -c {input.ref} {input.qry} > {output}
        '''

# convert paf to delta using ragtag.py paf2delta
rule convert_h1_paf_delta:
    input:
        ref = 'kyuss/kyuss.{chr}.fasta',
        qry = 'h1_chop/DH647.h1.{chr}.chop.fasta',
        paf = 'h1_chop/{chr}.paf'
    output:
        'h1_chop/{chr}.delta'
    shell:
        '''
        ragtag.py paf2delta -r {input.ref} -q {input.qry} {input.paf} > {output}
        '''

rule convert_h2_paf_delta:
    input:
        ref = 'kyuss/kyuss.{chr}.fasta',
        qry = 'h2_chop/DH647.h2.{chr}.chop.fasta',
        paf = 'h2_chop/{chr}.paf'
    output:
        'h2_chop/{chr}.delta'
    shell:
        '''
        ragtag.py paf2delta -r {input.ref} -q {input.qry} {input.paf} > {output}
        '''

# filter alignment
rule filter_h1_alignment:
    input:
        'h1_chop/{chr}.delta'
    output:
        'h1_chop/{chr}.filter'
    conda: 'syri'
    shell:
        '''
        delta-filter -g {input} > {output}
        '''

rule filter_h2_alignment:
    input:
        'h2_chop/{chr}.delta'
    output:
        'h2_chop/{chr}.filter'
    conda: 'syri'
    shell:
        '''
        delta-filter -g {input} > {output}
        '''

# call SNPs using show-snps
rule call_h1_snps:
    input:
        'h1_chop/{chr}.filter'
    output:
        'h1_chop/{chr}.snps'
    conda: 'syri'
    shell:
        '''
        show-snps -ClrHIT {input} > {output}
        '''

# call SNPs using show-snps
rule call_h2_snps:
    input:
        'h2_chop/{chr}.filter'
    output:
        'h2_chop/{chr}.snps'
    conda: 'syri'
    shell:
        '''
        show-snps -ClrHIT {input} > {output}
        '''

# concatenate the SNP files
rule cat_h1_snps:
    input:
        expand('h1_chop/{chr}.snps', chr = ['chr{}'.format(i) for i in range(1,8)])
    output:
        'h1_chop/h1.all.snps'
    shell:
        '''
        cat {input} > {output}
        '''

rule cat_h2_snps:
    input:
        expand('h2_chop/{chr}.snps', chr = ['chr{}'.format(i) for i in range(1,8)])
    output:
        'h2_chop/h2.all.snps'
    shell:
        '''
        cat {input} > {output}
        '''
# now syri to call SNPs
# rule syri_h1:
#     input:
#         paf = 'h1_chop/{chr}.paf',
#         ref = 'kyuss/kyuss.{chr}.fasta',
#         qur = 'h1_chop/DH647.h1.{chr}.chop.fasta'
#     output:
#         'syri_h1_{chr}.success'
#     params: 
#         pref = 'syri_h1_{chr}',
#         logn = 'syri_h1_{chr}.log'
#     conda: 'syri'
#     shell:
#         '''
#         syri -c {input.paf} -r {input.ref} -q {input.qur} --nosr --nosv --cigar --prefix {params.pref} -F P --no-chrmatch --lf {params.logn} && touch {output}
#         '''

# rule syri_h2:
#     input:
#         paf = 'h2_chop/{chr}.paf',
#         ref = 'kyuss/kyuss.{chr}.fasta',
#         qur = 'h2_chop/DH647.h2.{chr}.chop.fasta'
#     output:
#         'syri_h2_{chr}.success'
#     params: 
#         pref = 'syri_h2_{chr}',
#         logn = 'syri_h2_{chr}.log'
#     conda: 'syri'
#     shell:
#         '''
#         syri -c {input.paf} -r {input.ref} -q {input.qur} --nosr --nosv --cigar --prefix {params.pref} -F P --no-chrmatch --lf {params.logn} && touch {output}
#         '''